LIB = File.join(File.dirname(__FILE__), %w(.. lib))
$:.unshift(LIB) if File.exists?(LIB) unless $:.member?(LIB)

EXAMPLES = File.join(File.dirname(__FILE__), %w(.. examples))
$:.unshift(EXAMPLES) if File.exists?(EXAMPLES) unless $:.member?(EXAMPLES)

require 'optparse'
require 'ostruct'
require 'fileutils'

require "#{LIB}/modules/GenericApplication"
require "#{LIB}/modules/IOHelper"
require "#{LIB}/classes/CSSPrimer"

DEFAULT_CSS_FILE = "primed_styles.css"
CUSTOM_CSS_FILE = "new_styles.css"
MOCK_ARGV = []

class GenericApplicationMock
	include GenericApplication
end

describe GenericApplication, "#log" do

	before(:each) do
		@mock_generic_application = GenericApplicationMock.new
	end
	
	it "logs something without dying" do
		@mock_generic_application.log("~> hello")
	end

end

describe GenericApplication, "#handle_exception" do

	before(:each) do
		@mock_generic_application = GenericApplicationMock.new
	end

	it "handles exception without raising an exception itself" do

		mock_exception = OpenStruct.new
		mock_exception.message = ""
		mock_exception.exception = ""
		mock_exception.backtrace = []
	
		@mock_generic_application.handle_exception(mock_exception, false)

	end

end

describe CSSPrimer, "#initialize" do

	it "should have default css file initialized" do
	
		primer = CSSPrimer.new(MOCK_ARGV)
		primer.css_file.should == primer.config("DEFAULT_CSS_FILE_OUT")
		
	end
	
end

describe CSSPrimer, "#prime!" do

	after(:each) do
		File.delete(CUSTOM_CSS_FILE) if File.exists?(CUSTOM_CSS_FILE)
		File.delete(DEFAULT_CSS_FILE) if File.exists?(DEFAULT_CSS_FILE)
	end

	it "throws MarkupFileError if no markup file was specified" do
	
		begin
		
			primer = CSSPrimer.new(MOCK_ARGV)
			primer.prime!
			
        rescue CSSPrimer::MarkupFileError => e
            #self.handle_exception(e)
		end
		
	end

	it "should parse an html file (as only option specified)" do
	
		primer = CSSPrimer.new(MOCK_ARGV)
		primer.markup_file = "#{EXAMPLES}/test.html"
		primer.prime!
		
	end

	it "should parse an xml file (as only option specified)" do
	
		primer = CSSPrimer.new(MOCK_ARGV)
		primer.markup_file = "#{EXAMPLES}/test.xml"
		primer.prime!
		
	end

	it "should parse an xml file to custom css file" do
	
		primer = CSSPrimer.new(MOCK_ARGV)
		primer.markup_file = "#{EXAMPLES}/test.xml"
		primer.css_file = CUSTOM_CSS_FILE
		primer.prime!

		raise NoMethodError, "#{CUSTOM_CSS_FILE} was not found!" if !File.exists?(CUSTOM_CSS_FILE) 
		
	end

	
end