LIB_DIRECTORY = File.join(File.dirname(__FILE__), %w(.. lib))
$:.unshift(LIB_DIRECTORY) if File.exists?(LIB_DIRECTORY) unless $:.member?(LIB_DIRECTORY)

EXAMPLES_DIRECTORY = File.join(File.dirname(__FILE__), %w(.. examples))
$:.unshift(EXAMPLES_DIRECTORY) if File.exists?(EXAMPLES_DIRECTORY) unless $:.member?(EXAMPLES_DIRECTORY)

require 'optparse'
require 'ostruct'
require 'fileutils'

require "#{LIB_DIRECTORY}/modules/GenericApplication"
require "#{LIB_DIRECTORY}/modules/IOHelper"
require "#{LIB_DIRECTORY}/classes/CSSPrimer"

DEFAULT_CSS_FILE = "primed_styles.css"
CUSTOM_CSS_FILE = "new_styles.css"
MOCK_ARGV = []

# TODO: make less high level.

class GenericApplicationMock
  include GenericApplication
end

describe GenericApplication, "#log" do

  before(:each) do
    @mock_generic_application = GenericApplicationMock.new
  end

  it "logs something without dying" do
    @mock_generic_application.log("~> hello")
  end

end

describe CSSPrimer, "#initialize" do

  it "should have default css file initialized" do

    primer = CSSPrimer.new(MOCK_ARGV)
    primer.css_file.should == primer.config("DEFAULT_CSS_FILE_OUT")

  end

end

describe CSSPrimer, "#prime!" do

  after(:each) do
    File.delete(CUSTOM_CSS_FILE) if File.exists?(CUSTOM_CSS_FILE)
    File.delete(DEFAULT_CSS_FILE) if File.exists?(DEFAULT_CSS_FILE)
  end

  it "throws MarkupFileError if no markup file was specified" do

    begin

      primer = CSSPrimer.new(MOCK_ARGV)
      primer.prime!

    rescue CSSPrimer::MarkupFileError => e
#self.handle_exception(e)
    end

  end

  it "should parse an html file (as only option specified)" do

    primer = CSSPrimer.new(MOCK_ARGV)
    primer.markup_file = "#{EXAMPLES_DIRECTORY}/test.html"
    primer.prime!

  end

  it "should parse an xml file (as only option specified)" do

    primer = CSSPrimer.new(MOCK_ARGV)
    primer.markup_file = "#{EXAMPLES_DIRECTORY}/test.xml"
    primer.prime!

  end

  it "should parse a directory of files" do

    primer = CSSPrimer.new(MOCK_ARGV)
    primer.markup_file = "#{EXAMPLES_DIRECTORY}"
    primer.prime!

  end

  it "should parse an xml file to custom css file" do

    primer = CSSPrimer.new(MOCK_ARGV)
    primer.markup_file = "#{EXAMPLES_DIRECTORY}/test.xml"
    primer.css_file = CUSTOM_CSS_FILE
    primer.prime!

    raise NoMethodError, "#{CUSTOM_CSS_FILE} was not found!" if !File.exists?(CUSTOM_CSS_FILE)
    
  end


end